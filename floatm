#!/bin/sh
# math is a fuck

# -- refactor source

for i in ./refractor/*; do
  read -r shebang < ${i} # read only the first line into $shebang
  shebang="${shebang#\#}"; shebang="${shebang#\!}" # remove the first part of the shebang
  [ -x "$shebang" ] && { # make sure the shebang exists
    export REDIR="$PWD/refractor/"; . ${i} # source
  } # this will fall apart if users are not in ./
done

shiftF() { #shift mantissa $2 places
  n=0; m="$1"
  [ "$2" -ge 1 ] && {
    m=${m%?}; m="$u$m"; u=0; : $((n+=1))
  }
  until [ "$n" -eq "$2" ]; do
    m="${m%?}"; m="0$m"
    : $((n+=1))
  done
  echo "$m"
}
fadds() { # float add single 
  as="${1%% *}" # $NUMs is sign bit
  bs="${2%% *}"
  ae="${1% *}"; ae="${ae#* }" # $NUMe is exponent
  be="${2% *}"; be="${be#* }"
  am="${1##* }" # $NUMm is mantissa
  bm="${2##* }"
  [ "${o1%%.*}" -gt "${o2%%.*}" ] && {
    lg="1"
  } || { lg="2"; } # determine which is larger
  case "$lg" in
    1) # NUM=1
    ade=$(condec $ae); bde=$(condec $be)
    sn="$((ade-bde))"
    bnm=$(shiftF "$bm" "$sn")
    bne=$(conbin $(($(condec $be)+$sn)));;
    #echo "$bne $bnm";;
    2)
    ade=$(condec $ae); bde=$(condec $be)
    sn="$((bde-ade))"
    anm=$(shiftF "$am" "$sn")
    ane=$(conbin $(($(condec $ae)+$sn)))
    #echo "$ane $anm"
  esac
  
}
u="1" # hidden bit is always 1 unless otherwise stated

#case "$1" in
#  *" "*) condecF "$1" ;; # if the input has a space, expect it to be a raw binary float
#  *) conbinF "$1" ;; 
#esac # do a basic case on $1 for production usage

# everything below here is for testing; disregard all of it.

#conbind "$1"
#condec "$1"
conbinF "$1"
echo "--" 
condecF "${sbit} ${ad} ${mant}"
#condecF "$@"
#adddec "$@"
#nth "$@"

###
# Test values
# 7.6 - 0 10000001 11100110011001100110011 # conbinF
#                  123--45--67--89--12--34 # m - 13 1's
#         129                              # e - 2 unbiased
#       0                                  # s - positive
# 7.60015439948 # condecF
###
# Above data should always be the same for testing; unless doubles, extended doubles or quads are added
# Should really write some unit tests ...
